import{_ as n,o as s,c as a,e as l}from"./app-217b6b4b.js";const i="/blog/image-20230301172340172.png",t={},e=l('<h3 id="布局" tabindex="-1"><a class="header-anchor" href="#布局" aria-hidden="true">#</a> 布局</h3><ul><li><p>盒子模型的宽度如何计算</p><ul><li>标准盒模型的宽等于offsetWidth =(内容宽度＋内边距＋边框），无外边距</li><li>怪异盒模型，设置的宽度值包括 内容宽度＋内边距＋边框，自动压缩内容宽度</li></ul></li><li><p>margin纵向重叠问题</p><p><img src="'+i+`" alt="image-20230301172340172"></p><ul><li>相邻元素的margin-top和margin-bottom会发生重叠</li><li>空内容的p标签也会重叠</li><li>答案：15px</li></ul></li><li><p>margin的top left right bottom负值的情况？</p><ul><li>margin-top/left负值，元素向上、左移动</li><li>margin-right负值，自身不受影响，右侧元素左移</li><li>margin-bottom负值，自身不受影响，下方元素上移</li></ul></li><li><p>bfc的理解与应用？</p><ul><li><p>Block format context, 块级格式化上下文</p></li><li><p>是 一块独立的渲染区域，内部元素的渲染不会影响边界以外的元素</p></li><li><p><strong>形成bfc的常见条件？</strong></p><ul><li>float不为none</li><li>position为absolute或fixed</li><li><strong>overflow不为none，如hidden</strong></li><li>display：flex inline-block等</li></ul></li><li><p><strong>bfc的常见应用</strong></p><ul><li>清除浮动</li></ul></li></ul></li><li><p>float布局的问题，以及clearfix</p><ul><li><p>实现圣杯布局和双飞翼布局</p><ul><li>三栏布局，中间一栏最先加载和渲染（内容最重要）</li><li>两侧内容固定，中间内容随宽度自适应</li><li>一般用于pc网页</li></ul></li><li><p>圣杯布局和双飞翼布局的技术总结</p><ul><li>使用float布局</li><li>两侧使用margin负值，以便和中间内容横向重叠</li><li>防止中间内容被两侧覆盖，一个用padding,一个用margin</li></ul></li><li><p>手写clearfix</p><ul><li><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.clearfix::after</span><span class="token punctuation">{</span>
      <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
      <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span>
      <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul></li><li><p>flex画色子</p></li></ul><h3 id="定位" tabindex="-1"><a class="header-anchor" href="#定位" aria-hidden="true">#</a> 定位</h3><ul><li><p>absolute和relative根据什么定位</p><ul><li>relative依据自身定位</li><li>absolute依据最近一层的定位元素定位</li></ul></li><li><p>居中对齐有哪些实现方式</p><ul><li><p>水平</p><ul><li>inline元素：text-align：center</li><li>block元素：margin：auto、父元素flex布局</li><li>absolute元素：left：50% + margin-left负值、left:50% + transform:translateX(-50%)、top/left/bottom/right = 0 + margin:auto</li></ul></li><li><p>垂直</p><ul><li>line-height值等于height值</li><li>其他同水平类似</li></ul></li></ul></li></ul><h3 id="图文样式" tabindex="-1"><a class="header-anchor" href="#图文样式" aria-hidden="true">#</a> 图文样式</h3><ul><li><p>line-height的继承问题（有坑）</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
    <span class="token selector">body</span><span class="token punctuation">{</span>
      <span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
      <span class="token comment">/* line-height: 30px; */</span>
      <span class="token comment">/* 直接继承给子元素 */</span>
      <span class="token comment">/* line-height: 1.5; */</span>
      <span class="token comment">/* 使用小数或分数会先根据子元素的font-size算出具体的值，继承给p */</span>
      <span class="token property">line-height</span><span class="token punctuation">:</span> 200%<span class="token punctuation">;</span>
      <span class="token comment">/* 使用百分比会先根据父元素的font-size算出具体的值，继承给p */</span>
    <span class="token punctuation">}</span>
    <span class="token selector">p</span><span class="token punctuation">{</span>
      <span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>this is p<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="响应式" tabindex="-1"><a class="header-anchor" href="#响应式" aria-hidden="true">#</a> 响应式</h3><ul><li><p>rem是什么？</p><ul><li>相对长度单位，相对于根元素，常用于响应式布局</li></ul></li><li><p>如何实现响应式？</p><ul><li>使用rem+media-quary,根据不同的屏幕宽度设置html的font-size</li><li>弊端：“阶梯型”</li></ul></li><li><p>网页视口尺寸</p><ul><li>window.screen.height // 屏幕高度</li><li>window.innerHeight // 网页视口高度</li><li>document.body.clientHeight // body高度</li></ul></li><li><p>vw/vh</p><ul><li>vw网页视口宽度大小的1/100</li><li>vh网页视口高度大小的1/100</li><li>vmax两者的较大值，vmin两者的最小值</li></ul></li></ul><h3 id="css3" tabindex="-1"><a class="header-anchor" href="#css3" aria-hidden="true">#</a> CSS3</h3><ul><li>关于CSS3动画</li></ul>`,10),p=[e];function o(c,u){return s(),a("div",null,p)}const d=n(t,[["render",o],["__file","css.html.vue"]]);export{d as default};
