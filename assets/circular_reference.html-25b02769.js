import{_ as e,o as r,c,a as l}from"./app-03ffc0c7.js";const o={},t=l('<h2 id="esm和cjs区别-各自遇到循环引用时会怎么处理" tabindex="-1"><a class="header-anchor" href="#esm和cjs区别-各自遇到循环引用时会怎么处理" aria-hidden="true">#</a> esm和cjs区别,各自遇到循环引用时会怎么处理</h2><p>ESM（ECMAScript Modules）和CJS（CommonJS Modules）是两种不同的模块系统。</p><p>主要区别：</p><ol><li>语法：ESM使用import和export关键字进行模块导入和导出，而CJS使用require()函数和module.exports进行相应操作。</li><li>加载时机：ESM在编译阶段就会执行模块加载，而CJS在运行时才会加载模块。</li></ol><p>当遇到循环引用时的处理方式有所不同：</p><ul><li>ESM处理循环引用：ESM采用静态分析模块依赖关系的方式，在发现循环引用时，会返回一个未完成的模块对象。该对象中包含被引用模块的引用，但可能还未执行完整的初始化。这样可以避免死锁，但需要开发者自行处理模块加载的顺序和初始化过程。</li><li>CJS处理循环引用：CJS在遇到循环引用时，会返回已经执行完整初始化的部分模块对象。这意味着CJS模块在加载时可以访问被循环引用的模块的部分内容，但仍然存在潜在的死锁风险。</li></ul>',6),i=[t];function s(a,n){return r(),c("div",null,i)}const d=e(o,[["render",s],["__file","circular_reference.html.vue"]]);export{d as default};
