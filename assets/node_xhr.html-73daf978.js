import{_ as n,o as s,c as a,e}from"./app-7d510d42.js";const t={},o=e(`<p>在 Node.js 中，可以使用 <code>http</code> 或者更高级的模块（如 <code>axios</code>、<code>node-fetch</code> 等）来发送 HTTP 请求。然而，<code>XMLHttpRequest</code> 是浏览器提供的 API，用于在客户端发起 HTTP 请求，不是 Node.js 的原生功能。</p><p>如果你想在 Node.js 中发送类似于浏览器中的 <code>XMLHttpRequest</code> 请求，可以使用第三方库 <code>xhr2</code> 或 <code>xmlhttprequest</code>。这些库允许你在 Node.js 环境中模拟浏览器中的 XMLHttpRequest 功能。你可以使用 npm 或者 yarn 进行安装，然后在 Node.js 代码中引入适当的库并使用它。</p><p>以下是一个示例，展示如何使用 <code>xhr2</code> 库在 Node.js 中发送 XMLHttpRequest 请求：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> XMLHttpRequest <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;xhr2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;https://api.example.com/data&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> response <span class="token operator">=</span> xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，虽然可以在 Node.js 中使用 <code>XMLHttpRequest</code> 来模拟浏览器中的请求，但在大多数情况下，推荐使用更适合 Node.js 的库来发送 HTTP 请求，例如 <code>axios</code>、<code>node-fetch</code>、<code>got</code> 等。这些库提供了更简洁、易于使用和功能丰富的 API，专为 Node.js 开发而设计，与 <code>XMLHttpRequest</code> 相比更适合在 Node.js 环境中进行 HTTP 请求操作。</p>`,5),p=[o];function c(u,l){return s(),a("div",null,p)}const d=n(t,[["render",c],["__file","node_xhr.html.vue"]]);export{d as default};
