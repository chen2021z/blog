import{_ as e,r as o,o as c,c as i,a as s,b as n,d as t,e as p}from"./app-84d7f4b0.js";const l={},u=s("h2",{id:"背景",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#背景","aria-hidden":"true"},"#"),n(" 背景")],-1),r=s("p",null,"只要是列表、有顺序的列表、而且顺序有意义的列表，那么就肯定会有拖拽排序的需求。这个需求很常见。",-1),k=s("p",null,"常有人吐槽，说国外大厂的产品在交互上做得如何如何好。而『可拖拽列表』这个组件由于其很高的复杂性，在产品之间对比的时候总是能见到它作为典型案例出现。",-1),d={href:"https://github.com/atlassian/react-beautiful-dnd",target:"_blank",rel:"noopener noreferrer"},v=p('<p>但保持我的一贯作风，今天不用开源的，来尝试自己手撸一个。</p><h2 id="总体思路" tabindex="-1"><a class="header-anchor" href="#总体思路" aria-hidden="true">#</a> 总体思路</h2><ol><li>首先我们要有能力实现一个元素的拖拽</li><li>把一个元素提升，做成一组元素</li><li>样式美化</li><li>API设计优化</li></ol><h2 id="单个组件的拖拽" tabindex="-1"><a class="header-anchor" href="#单个组件的拖拽" aria-hidden="true">#</a> 单个组件的拖拽</h2><h3 id="监听事件" tabindex="-1"><a class="header-anchor" href="#监听事件" aria-hidden="true">#</a> 监听事件</h3>',5),g={href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable",target:"_blank",rel:"noopener noreferrer"},m=p("<p>而放弃draggable意味着放弃了整个<code>Drag</code>事件家族，因此我们只能依赖<code>Mouse</code>（或<code>Pointer</code>）事件家族来感知拖拽事件。我们需要四种事件：</p><ul><li><code>pointerdown</code>：开始拖拽</li><li><code>pointerup</code> / <code>pointercancel</code>：结束拖拽</li><li><code>pointermove</code>：移动</li></ul>",2),b={href:"https://stackoverflow.com/questions/1685326/responding-to-the-onmousemove-event-outside-of-the-browser-window-in-ie",target:"_blank",rel:"noopener noreferrer"},h=p(`<div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">const</span> DraggableItem<span class="token operator">:</span> <span class="token function-variable function">FC</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>dragging<span class="token punctuation">,</span> setDragging<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dragging<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token function-variable function">handlerMove</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token function-variable function">handlerCancel</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;pointermove&#39;</span><span class="token punctuation">,</span> handlerMove<span class="token punctuation">)</span><span class="token punctuation">;</span>
    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;pointerup&#39;</span><span class="token punctuation">,</span> handlerCancel<span class="token punctuation">)</span><span class="token punctuation">;</span>
    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;pointercancel&#39;</span><span class="token punctuation">,</span> handlerCancel<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;pointermove&#39;</span><span class="token punctuation">,</span> handlerMove<span class="token punctuation">)</span><span class="token punctuation">;</span>
      window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;pointerup&#39;</span><span class="token punctuation">,</span> handlerCancel<span class="token punctuation">)</span><span class="token punctuation">;</span>
      window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;pointercancel&#39;</span><span class="token punctuation">,</span> handlerCancel<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>dragging<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">onPointerDown</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setDragging</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">我是一些内容</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="坐标与位移" tabindex="-1"><a class="header-anchor" href="#坐标与位移" aria-hidden="true">#</a> 坐标与位移</h3><p>在鼠标拖拽过程中，被拖拽的元素肯定也要在视觉上跟随鼠标一起移动的。</p><p>为了计算『移动』这个东西，我们能够想到最熟悉的东西无非就是<code>transform</code>这个属性了。同时别忘记了<code>position</code>的<code>relative</code>和<code>absolute</code>。</p><p><code>transform</code>需要的是『偏移量』，也是说，我们需要一个初始值和一个当前值。初始值在<code>pointerdown</code>的时候固定下来，当前值则随着<code>pointermove</code>不断变化，以此得到一个在不断变化的偏移量。</p><p>接下来分别用<code>x</code>、<code>y</code>来表示横向（向右）和纵向（向下）的偏移量，具体的数值用<code>clientX/Y</code>来获取：</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">const</span> DraggableItem<span class="token operator">:</span> <span class="token function-variable function">FC</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>dragging<span class="token punctuation">,</span> setDragging<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token punctuation">[</span>x0<span class="token punctuation">,</span> setX0<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>y0<span class="token punctuation">,</span> setY0<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> setX<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>y<span class="token punctuation">,</span> setY<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dragging<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token function-variable function">handlerMove</span> <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> PointerEvent<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">setX</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>clientX<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">setY</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>clientY<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token function-variable function">handlerCancel</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">setDragging</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;pointermove&#39;</span><span class="token punctuation">,</span> handlerMove<span class="token punctuation">)</span><span class="token punctuation">;</span>
    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;pointerup&#39;</span><span class="token punctuation">,</span> handlerCancel<span class="token punctuation">)</span><span class="token punctuation">;</span>
    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;pointercancel&#39;</span><span class="token punctuation">,</span> handlerCancel<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;pointermove&#39;</span><span class="token punctuation">,</span> handlerMove<span class="token punctuation">)</span><span class="token punctuation">;</span>
      window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;pointerup&#39;</span><span class="token punctuation">,</span> handlerCancel<span class="token punctuation">)</span><span class="token punctuation">;</span>
      window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;pointercancel&#39;</span><span class="token punctuation">,</span> handlerCancel<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>dragging<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> position<span class="token operator">:</span> <span class="token string">&#39;relative&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
        <span class="token attr-name">onPointerDown</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">setDragging</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">setX0</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>clientX<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">setY0</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>clientY<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">setX</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>clientX<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">setY</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>clientY<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
        <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> position<span class="token operator">:</span> <span class="token string">&#39;absolute&#39;</span><span class="token punctuation">,</span> transform<span class="token operator">:</span> dragging <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">translate3d(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>x <span class="token operator">-</span> x0<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>y <span class="token operator">-</span> y0<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px,0)</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
      <span class="token punctuation">&gt;</span></span><span class="token plain-text">
        我是一些内容
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就做好了一个普通的可拖拽元素组件。</p><h2 id="一组元素的拖拽" tabindex="-1"><a class="header-anchor" href="#一组元素的拖拽" aria-hidden="true">#</a> 一组元素的拖拽</h2><h3 id="组的框架" tabindex="-1"><a class="header-anchor" href="#组的框架" aria-hidden="true">#</a> 组的框架</h3><p>即使是一组元素，鼠标也只能同时拖拽一个元素，因此上面所写的绝大部分逻辑都可以保留在列表组件这一级，只需要把<code>onPointerDown</code>下放到子元素中去即可</p><blockquote><p>啊咧，说起来我好像还真没考虑过移动端环境，在多点触控设备的支持下，如果要同时拖拽多个元素要怎么做……</p></blockquote><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">const</span> DraggableList<span class="token operator">:</span> <span class="token function-variable function">FC</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> children <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>draggingIndex<span class="token punctuation">,</span> setDraggingIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ...</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>draggingIndex <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token function-variable function">handlerCancel</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">setDraggingIndex</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>draggingIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> position<span class="token operator">:</span> <span class="token string">&#39;relative&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span>children<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
          <span class="token attr-name">onPointerDown</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span> <span class="token function">setDraggingIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
          <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>
            position<span class="token operator">:</span> <span class="token string">&#39;relative&#39;</span><span class="token punctuation">,</span>
            transform<span class="token operator">:</span> draggingIndex <span class="token operator">===</span> index <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">translate3d(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>x <span class="token operator">-</span> x0<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>y <span class="token operator">-</span> y0<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px,0)</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
        <span class="token punctuation">&gt;</span></span><span class="token plain-text">
          </span><span class="token punctuation">{</span>child<span class="token punctuation">}</span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码中，注意<code>position: &#39;relative&#39;</code>这个属性，相比于<code>absolute</code>，前者可以在原来的位置撑开属于它的空间，同时又可以相对移动。</p><h3 id="新的顺序" tabindex="-1"><a class="header-anchor" href="#新的顺序" aria-hidden="true">#</a> 新的顺序</h3><p>当一个元素被拖拽到另一个元素的位置上的时候，我们需要一种交互视觉效果，即让正在被拖拽的元素“挤开”当前位置的元素。</p><p>首先第一个问题：如何判断当前拖拽到了某个元素的上方？——直觉告诉我，也许可以使用<code>mouseenter</code>之类的事件，然而，由于我们正在拖拽的元素也在跟随鼠标移动，它一直“遮挡”着鼠标指针，因此下方被遮盖的元素无法触发<code>mouseenter</code>事件。</p><p>因此我的蠢办法是：计算各个元素的尺寸来计算。</p><p>可如果以这种方案，想要做得很完美的话，我需要记录所有元素的尺寸，这会让代码变得非常复杂。因此先做一些简化：假设我们只在纵向这一个方向上拖拽，并且上层组件明确指定了所有子元素统一的高度值。</p><p>然后是第二个问题：“挤开”的过程，其实就是数组位置的变换。为了实现这个效果，我们需要一个临时的数组顺序。</p><p>（代码省略）</p><p>为了实现这个目标，我们需要设计一个API，大概长这样：<code>onUpdate: (data: unknown[])=&gt;void</code>。</p><p>为了实现这个API，那么意味着我们需要把<code>data</code>这个东西给传进来，既然它来了，那么负责渲染data的React组件也要传进来。</p><p>于是我们的API变成了这样：</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">DraggableList</span><span class="token generic class-name"><span class="token operator">&lt;</span>dataT<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
  props<span class="token operator">:</span> PropsWithChildren<span class="token operator">&lt;</span><span class="token punctuation">{</span>
    data<span class="token operator">:</span> <span class="token punctuation">(</span>dataT <span class="token operator">&amp;</span> <span class="token punctuation">{</span> key<span class="token operator">:</span> React<span class="token punctuation">.</span>Key <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    Cpn<span class="token operator">:</span> <span class="token constant">FC</span><span class="token operator">&lt;</span>dataT<span class="token operator">&gt;</span><span class="token punctuation">;</span>
    height<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    <span class="token function-variable function">onUpdate</span><span class="token operator">:</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> dataT<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> ReactElement <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token punctuation">{</span>data2<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>d<span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Cpn</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>d<span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="滚动问题" tabindex="-1"><a class="header-anchor" href="#滚动问题" aria-hidden="true">#</a> 滚动问题</h3><p>我们还需要考虑很多因素。</p><p>第一，滚动问题。由于一个列表组件的长度总是有限的，很可能会出现滚动条，因此我们需要上层传入一个滚动发生的元素，称它为<code>scrollParent</code>，然后我们从它上面取<code>scrollTop</code>来辅助我们的<code>y</code>坐标计算以及新的数组排序。</p><p>第二，父容器尺寸变化。受到页面本身尺寸或者其他元素的影响，父容器的尺寸也可能是会发生变化的。但实质上依然可以看作是“滚动”问题，我们需要<code>ResizeObserver</code>这个东西来通知我们就行了。</p><p>至此为止，我们的主要功能就全部实现了，虽然简陋了一些，不过该有的功能都有了。</p><h2 id="样式与交互优化" tabindex="-1"><a class="header-anchor" href="#样式与交互优化" aria-hidden="true">#</a> 样式与交互优化</h2><p>这块内容那就可以说是没有上限了，似乎是可以无限优化下去的。</p><p>我简单列举几个需要关注的css属性：</p><ul><li>user-select</li><li>transition</li><li>opacity</li><li>z-index</li><li>background-color</li><li>cursor</li></ul><p>交互上可能还用到一些比较偏门的js能力，例如：</p><ul><li>Element.clone</li></ul><p>（精力有限，暂时不展开讲。）</p><h2 id="api优化" tabindex="-1"><a class="header-anchor" href="#api优化" aria-hidden="true">#</a> API优化</h2><p>这块我希望参考一下成熟的开源组件是如何实践的。</p>`,39),f={href:"https://react-dnd.github.io/react-dnd/about",target:"_blank",rel:"noopener noreferrer"};function w(x,y){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,r,k,s("p",null,[n("虽然目前也已经有很多成熟的开源库，如："),s("a",d,[n("react-beautiful-dnd"),t(a)]),n("。")]),v,s("p",null,[n("其实HTML也有现成的实现："),s("a",g,[n("draggable"),t(a)]),n(" ，但它的定制化程度很低，尤其是在样式方面，完全不能满足需求，因此不能简单依赖它。")]),m,s("p",null,[n("在注册事件的时候要特别注意，后面三个事件是需要挂载在window上的，这样才能响应全窗口（甚至"),s("a",b,[n("全屏幕"),t(a)]),n("）的鼠标事件，而不被局限在一个小区域内。")]),h,s("p",null,[n("大家可以关注一下"),s("a",f,[n("React DnD"),t(a)]),n("这个库，后续再来更新。")])])}const E=e(l,[["render",w],["__file","draggable_list.html.vue"]]);export{E as default};
